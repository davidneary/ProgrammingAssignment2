message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:10)
makeVector(1:10)
cachemean(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:10)
debug()
traceback()
cachemean(1:10)
str(cachemean(1:10))
debug(cachemean)
cachemean(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,de
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- as.data.frame(x)$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:10)
x <- 1:10
x$3
x$[1]
x$
?
]
?$
?`$`
test<-makeVector(1:10)
cachemean(test)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,de
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test<-makeVector(1:10)
cachemean(test)
cachemean(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse
if(!is.null(m)) {
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
test2<- makeCacheMatrix(matrix(1:10,2,5))
cacheSolve(test2)
solve(test2)
solve(matrix(1:10,2,5))
test2 <- matrix(1:4,2,2)
solve(test2)
cacheSolve(test2)
test2<- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(test2)
rawr <- cacheSolve(test2)
rawr
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse
if(!is.null(m)) {
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
thematrix <- makecachematrix(matrix(1:4,2,2))
thematrix <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(thematrix)
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeVector(1:20)
cachemean(test)
test <- makeVector(0:20)
cachemean(test)
test <- makeVector(0:20)
cachemean(test)
cachemean(test)
cachemean(test)
cachemean(test)
cachemean(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse
if(!is.null(m)) {
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
test <- makeCacheMatrix(matrix(1:16,4,4))
test
cacheSolve(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse
if(!is.null(m)) {return(m)}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
test <- makeCacheMatrix(matrix(1:16,4,4))
cacheSolve(test)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
ptm <- proc.time()
## Get Matrix "m" from Cache
m <- x$getinv()
## Check if not null, Retrun value read from Cache
if(!is.null(m)) {
message("getting cached data")
cat("Process Time", proc.time() - ptm)
return(m)
}
## if "m" is NULL, get origal Matirx
mydata <- x$get()
## Calculate inverse using Solve
m <- solve(mydata, ...)
x$setinv(m)
cat("Process Time", proc.time() - ptm)
## Returm inverse
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
ptm <- proc.time()
## Get Matrix "m" from Cache
m <- x$getinv()
## Check if not null, Retrun value read from Cache
if(!is.null(m)) {
message("getting cached data")
cat("Process Time", proc.time() - ptm)
return(m)
}
## if "m" is NULL, get origal Matirx
mydata <- x$get()
## Calculate inverse using Solve
m <- solve(mydata, ...)
x$setinv(m)
cat("Process Time", proc.time() - ptm)
## Returm inverse
m
}
test<- makeCacheMatrix(matrix(1:16,4,4))
matrix(1:16,4,4)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
?solve
?LAPACK
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
ptm <- proc.time()
## Get Matrix "m" from Cache
m <- x$getinv()
## Check if not null, Retrun value read from Cache
if(!is.null(m)) {
message("getting cached data")
cat("Process Time", proc.time() - ptm)
return(m)
}
## if "m" is NULL, get origal Matirx
mydata <- x$get()
## Calculate inverse using Solve
m <- solve(mydata, ...)
x$setinv(m)
cat("Process Time", proc.time() - ptm)
## Returm inverse
m
}
test<- makeCacheMatrix()
test$set(matix(1:4,2,2))
test$set(matrix(1:4,2,2))
test$get
test$set
cacheSolve(test)
a<-makeVector()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector()
a$set(matrix(1:100,10,10))
cachemean(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse
if(!is.null(m)) {return(m)}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
a<-makeCacheMatrix
a<-makeCacheMatrix()
a$set(matrix(1:144,12,12))
cacheSolve(a)
?proc.time
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {return(m)}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function()m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {return(m)}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
a<-makeCacheMatrix
a$set(matrix(1:144,12,12))
a<-makeCacheMatrix()
a$set(matrix(1:144,12,12))
cacheSolve(a)
a$set(matrix(1:4,2,2))
cacheSolve(a)
a$set(matrix(1:9,3,3))
cacheSolve(a)
b <- makeCacheMatrix()
b$set(matrix(c(1,1,1,3,4,3,3,3,4),3,3))
cacheSolve(b)
git commit [completion of assignment 2]
